<system>
  log_level info
</system>

# Docker Fluentd input for container logs (captures STDOUT and STDERR)
<source>
  @type forward
  port 24224
  bind 0.0.0.0
  tag docker.container
</source>

# Syslog capture for FastAPI syslog handler
<source>
  @type syslog
  port 5140
  bind 0.0.0.0
  tag syslog.fastapi
  with_priority true
  message_format rfc3164
  <parse>
    @type regexp
    expression ^fastapi\[(?<process>\d+)\]: (?<level>[^\s]+) - (?<message>.*)$
  </parse>
</source>

# HTTP input for health monitoring and manual log injection
<source>
  @type http
  port 9880
  bind 0.0.0.0
  tag http.logs
</source>

# File input for any additional FastAPI logs (if written to file)
<source>
  @type tail
  path /var/log/fastapi_app.log
  pos_file /fluentd/log/fastapi_app.pos
  tag fastapi.logfile
  format json
  read_from_head true
  refresh_interval 5
</source>

# Parse Docker container logs (STDOUT/STDERR, assuming JSON format from Docker)
<filter docker.container>
  @type parser
  key_name log
  reserve_data true
  <parse>
    @type regexp
    expression ^(?<time>[^|]+) \| (?<level>[^|]+) \| (?<name>[^|]+) \| (?<message>.*)$
    time_format %Y-%m-%d %H:%M:%S,%L
  </parse>
</filter>

# Add container metadata to Docker logs
<filter docker.container>
  @type record_transformer
  <record>
    container_name ${record["container_name"] || "unknown"}
    container_id ${record["container_id"] || "unknown"}
    source ${record["name"] == "app.stderr" ? "stderr" : "stdout"}
    app "fastapi"
  </record>
</filter>

# Process FastAPI file logs
<filter fastapi.logfile>
  @type record_transformer
  <record>
    source "logfile"
    app "fastapi"
  </record>
</filter>

# Process syslog messages
<filter syslog.fastapi>
  @type record_transformer
  <record>
    source "syslog"
    app "fastapi"
  </record>
</filter>

# Add common metadata to all logs
<filter **>
  @type record_transformer
  <record>
    hostname "#{Socket.gethostname}"
    fluentd_tag ${tag}
    processed_at ${Time.now.utc.iso8601}
  </record>
</filter>

# Route Docker container logs (STDOUT/STDERR) to Loki
<match docker.container>
  @type loki
  url http://loki:3100
  extra_labels {"job":"fluentd","log_type":"container"}
  label_keys ["container_name", "source", "app", "level"]
  remove_keys ["fluentd_tag", "name"]
  <label>
    container $.container_name
    source $.source
    app $.app
    level $.level
  </label>
  <buffer>
    @type file
    path /fluentd/log/loki-container
    flush_mode interval
    flush_interval 5s
    chunk_limit_size 1m
    retry_max_interval 30
    retry_forever true
  </buffer>
</match>

# Route FastAPI file logs to Loki
<match fastapi.logfile>
  @type loki
  url http://loki:3100
  extra_labels {"job":"fluentd","log_type":"application"}
  label_keys ["source", "app", "level"]
  remove_keys ["fluentd_tag"]
  <label>
    source $.source
    app $.app
    level $.level
    logger $.logger
  </label>
  <buffer>
    @type file
    path /fluentd/log/loki-app
    flush_mode interval
    flush_interval 5s
    chunk_limit_size 1m
    retry_max_interval 30
    retry_forever true
  </buffer>
</match>

# Route syslog messages to Loki
<match syslog.fastapi>
  @type loki
  url http://loki:3100
  extra_labels {"job":"fluentd","log_type":"syslog"}
  label_keys ["source", "app", "level", "process"]
  remove_keys ["fluentd_tag"]
  <label>
    source $.source
    app $.app
    level $.level
    process $.process
  </label>
  <buffer>
    @type file
    path /fluentd/log/loki-syslog
    flush_mode interval
    flush_interval 5s
    chunk_limit_size 1m
    retry_max_interval 30
    retry_forever true
  </buffer>
</match>

# Catch-all for any other logs
<match **>
  @type loki
  url http://loki:3100
  extra_labels {"job":"fluentd","log_type":"other"}
  label_keys ["source"]
  remove_keys ["fluentd_tag"]
  <label>
    source $.source
    tag $.fluentd_tag
  </label>
  <buffer>
    @type file
    path /fluentd/log/loki-other
    flush_mode interval
    flush_interval 5s
    chunk_limit_size 1m
    retry_max_interval 30
    retry_forever true
  </buffer>
</match>